{"version":3,"sources":["scripts/main.js"],"names":["rows","document","querySelectorAll","columns","cells","cellsInRow","map","row","startCellVelues","startButton","querySelector","messageStart","messageLose","messageWin","score","i","j","push","children","clearCells","started","rotated","randomCellFill","length","randomIndex","someArr","Math","floor","random","randomCell","randomValue","classList","innerText","splice","indexOf","start","style","restart","add","forEach","cell","className","isMergePossible","wholeField","line","deleteCell","element","cellMerge","curr","prev","value","dataset","blocked","remove","rotateCell","arrowUp","column","rotateCells","reverse","arrowDown","arrowRight","arrowLeft","arrowMove","direction","removeAttribute","isMoveAllowed","includes","mergeAllowed","addEventListener","evt","key","preventDefault"],"mappings":"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","file":"main.d24a33dc.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst rows = [...document.querySelectorAll('.field-row')];\nconst columns = [[], [], [], []];\nconst cells = document.querySelectorAll('.field-cell');\nconst cellsInRow = rows.map((row) => [...row.querySelectorAll('.field-cell')]);\nconst startCellVelues = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n\nconst startButton = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\n\nfor (let i = 0; i < 4; i++) {\n  for (let j = 0; j < 4; j++) {\n    columns[j].push(rows[i].children[j]);\n  }\n}\n\nlet clearCells = [...cells];\nlet started = false;\nlet rotated = false;\n\nconst randomCellFill = () => {\n  if (!clearCells.length) {\n    return;\n  }\n\n  const randomIndex = (someArr) => Math.floor(Math.random() * someArr.length);\n  const randomCell = clearCells[randomIndex(clearCells)];\n  const randomValue = startCellVelues[randomIndex(startCellVelues)];\n\n  randomCell.classList = (`field-cell field-cell--${randomValue}`);\n  randomCell.innerText = randomValue;\n\n  clearCells.splice(clearCells.indexOf(randomCell), 1);\n};\n\nconst start = () => {\n  messageStart.style = 'display: none;';\n  startButton.classList = 'button restart';\n  startButton.innerText = 'Restart';\n\n  randomCellFill();\n  randomCellFill();\n  started = true;\n};\n\nconst restart = () => {\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  clearCells = [...cells];\n  score.innerText = 0;\n\n  cells.forEach(cell => {\n    cell.innerText = '';\n    cell.className = 'field-cell';\n  });\n\n  randomCellFill();\n  randomCellFill();\n};\n\nconst isMergePossible = () => {\n  const wholeField = [...cellsInRow, ...columns];\n\n  for (const line of wholeField) {\n    for (let i = 0; i < 3; i++) {\n      if (line[i].innerText === line[i + 1].innerText) {\n        return true;\n      }\n    }\n  }\n};\n\nconst deleteCell = (element) => {\n  element.innerText = '';\n  element.className = 'field-cell';\n  clearCells.push(element);\n};\n\nconst cellMerge = (curr, prev) => {\n  const value = curr.innerText * 2;\n\n  curr.innerText = value;\n  curr.className = `field-cell field-cell--${value}`;\n  score.innerText = +score.innerText + value;\n  deleteCell(prev);\n\n  curr.dataset.blocked = true;\n  prev.dataset.blocked = true;\n\n  if (value === 2048) {\n    messageWin.classList.remove('hidden');\n  }\n};\n\nconst rotateCell = (curr, prev) => {\n  curr.innerText = prev.innerText;\n  curr.className = prev.className;\n  clearCells.splice(clearCells.indexOf(curr), 1);\n  deleteCell(prev);\n};\n\nconst arrowUp = () => {\n  for (const column of columns) {\n    rotateCells([...column].reverse());\n  }\n};\n\nconst arrowDown = () => {\n  for (const column of columns) {\n    rotateCells(column);\n  }\n};\n\nconst arrowRight = () => {\n  for (const row of cellsInRow) {\n    rotateCells(row);\n  }\n};\n\nconst arrowLeft = () => {\n  for (const row of cellsInRow) {\n    rotateCells([...row].reverse());\n  }\n};\n\nconst arrowMove = (direction) => {\n  if (!clearCells.length && !isMergePossible()) {\n    messageLose.classList.remove('hidden');\n  }\n\n  switch (direction) {\n    case 'ArrowUp':\n      arrowUp();\n      break;\n    case 'ArrowDown':\n      arrowDown();\n      break;\n    case 'ArrowRight':\n      arrowRight();\n      break;\n    case 'ArrowLeft':\n      arrowLeft();\n      break;\n    default: break;\n  }\n\n  cells.forEach(cell => {\n    cell.removeAttribute('data-blocked');\n  });\n};\n\nconst rotateCells = (line) => {\n  for (let i = 3; i > 0; i--) {\n    const isMoveAllowed = clearCells.includes(line[i])\n      && !clearCells.includes(line[i - 1]);\n\n    const mergeAllowed = line[i].innerText === line[i - 1].innerText\n      && line[i].innerText.length\n      && !line[i - 1].dataset.blocked;\n\n    if ((mergeAllowed || isMoveAllowed) && !rotated) {\n      rotated = true;\n    }\n\n    if (mergeAllowed) {\n      cellMerge(line[i], line[i - 1]);\n      rotateCells(line);\n    }\n\n    if (isMoveAllowed) {\n      rotateCell(line[i], line[i - 1]);\n      rotateCells(line);\n    }\n  }\n};\n\ndocument.addEventListener('keydown', (evt) => {\n  const arrowDirections = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n  if (arrowDirections.includes(evt.key)) {\n    evt.preventDefault();\n    arrowMove(evt.key);\n\n    if (rotated) {\n      randomCellFill();\n      rotated = false;\n    }\n  }\n});\n\nstartButton.addEventListener('click', () => {\n  if (!started) {\n    start();\n  } else {\n    restart();\n  }\n});\n"]}